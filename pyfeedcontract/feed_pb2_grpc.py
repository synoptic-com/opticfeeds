# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyfeedcontract import feed_pb2 as pyfeedcontract_dot_feed__pb2


class FeedServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Subscribe = channel.unary_stream(
                '/synoptic.feed.feed.FeedService/Subscribe',
                request_serializer=pyfeedcontract_dot_feed__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=pyfeedcontract_dot_feed__pb2.FeedMessage.FromString,
                )


class FeedServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Subscribe(self, request, context):
        """Subscribe to the feed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FeedServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=pyfeedcontract_dot_feed__pb2.SubscriptionRequest.FromString,
                    response_serializer=pyfeedcontract_dot_feed__pb2.FeedMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'synoptic.feed.feed.FeedService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FeedService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/synoptic.feed.feed.FeedService/Subscribe',
            pyfeedcontract_dot_feed__pb2.SubscriptionRequest.SerializeToString,
            pyfeedcontract_dot_feed__pb2.FeedMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IngressServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitFeedMessage = channel.unary_unary(
                '/synoptic.feed.feed.IngressService/SubmitFeedMessage',
                request_serializer=pyfeedcontract_dot_feed__pb2.FeedMessage.SerializeToString,
                response_deserializer=pyfeedcontract_dot_feed__pb2.SubmitFeedMessageResponse.FromString,
                )
        self.SubmitFeedMessages = channel.stream_stream(
                '/synoptic.feed.feed.IngressService/SubmitFeedMessages',
                request_serializer=pyfeedcontract_dot_feed__pb2.FeedMessage.SerializeToString,
                response_deserializer=pyfeedcontract_dot_feed__pb2.SubmitFeedMessageResponse.FromString,
                )


class IngressServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitFeedMessage(self, request, context):
        """Submits a single message to the ingress instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitFeedMessages(self, request_iterator, context):
        """Submits a stream of messages to the feed ingress.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IngressServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitFeedMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitFeedMessage,
                    request_deserializer=pyfeedcontract_dot_feed__pb2.FeedMessage.FromString,
                    response_serializer=pyfeedcontract_dot_feed__pb2.SubmitFeedMessageResponse.SerializeToString,
            ),
            'SubmitFeedMessages': grpc.stream_stream_rpc_method_handler(
                    servicer.SubmitFeedMessages,
                    request_deserializer=pyfeedcontract_dot_feed__pb2.FeedMessage.FromString,
                    response_serializer=pyfeedcontract_dot_feed__pb2.SubmitFeedMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'synoptic.feed.feed.IngressService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IngressService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitFeedMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/synoptic.feed.feed.IngressService/SubmitFeedMessage',
            pyfeedcontract_dot_feed__pb2.FeedMessage.SerializeToString,
            pyfeedcontract_dot_feed__pb2.SubmitFeedMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitFeedMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/synoptic.feed.feed.IngressService/SubmitFeedMessages',
            pyfeedcontract_dot_feed__pb2.FeedMessage.SerializeToString,
            pyfeedcontract_dot_feed__pb2.SubmitFeedMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
