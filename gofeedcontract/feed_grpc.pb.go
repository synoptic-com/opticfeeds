// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gofeedcontract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeedServiceClient is the client API for FeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiceClient interface {
	// Subscribe to the feed.
	Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (FeedService_SubscribeClient, error)
}

type feedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiceClient(cc grpc.ClientConnInterface) FeedServiceClient {
	return &feedServiceClient{cc}
}

func (c *feedServiceClient) Subscribe(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (FeedService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &FeedService_ServiceDesc.Streams[0], "/synoptic.feed.feed.FeedService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &feedServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeedService_SubscribeClient interface {
	Recv() (*FeedMessage, error)
	grpc.ClientStream
}

type feedServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *feedServiceSubscribeClient) Recv() (*FeedMessage, error) {
	m := new(FeedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeedServiceServer is the server API for FeedService service.
// All implementations must embed UnimplementedFeedServiceServer
// for forward compatibility
type FeedServiceServer interface {
	// Subscribe to the feed.
	Subscribe(*SubscriptionRequest, FeedService_SubscribeServer) error
	mustEmbedUnimplementedFeedServiceServer()
}

// UnimplementedFeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServiceServer struct {
}

func (UnimplementedFeedServiceServer) Subscribe(*SubscriptionRequest, FeedService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedFeedServiceServer) mustEmbedUnimplementedFeedServiceServer() {}

// UnsafeFeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiceServer will
// result in compilation errors.
type UnsafeFeedServiceServer interface {
	mustEmbedUnimplementedFeedServiceServer()
}

func RegisterFeedServiceServer(s grpc.ServiceRegistrar, srv FeedServiceServer) {
	s.RegisterService(&FeedService_ServiceDesc, srv)
}

func _FeedService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeedServiceServer).Subscribe(m, &feedServiceSubscribeServer{stream})
}

type FeedService_SubscribeServer interface {
	Send(*FeedMessage) error
	grpc.ServerStream
}

type feedServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *feedServiceSubscribeServer) Send(m *FeedMessage) error {
	return x.ServerStream.SendMsg(m)
}

// FeedService_ServiceDesc is the grpc.ServiceDesc for FeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synoptic.feed.feed.FeedService",
	HandlerType: (*FeedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _FeedService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "feed.proto",
}

// IngressServiceClient is the client API for IngressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngressServiceClient interface {
	// Submits a single message to the ingress instance.
	SubmitFeedMessage(ctx context.Context, in *FeedMessage, opts ...grpc.CallOption) (*SubmitFeedMessageResponse, error)
	// Submits a stream of messages to the feed ingress.
	SubmitFeedMessages(ctx context.Context, opts ...grpc.CallOption) (IngressService_SubmitFeedMessagesClient, error)
}

type ingressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngressServiceClient(cc grpc.ClientConnInterface) IngressServiceClient {
	return &ingressServiceClient{cc}
}

func (c *ingressServiceClient) SubmitFeedMessage(ctx context.Context, in *FeedMessage, opts ...grpc.CallOption) (*SubmitFeedMessageResponse, error) {
	out := new(SubmitFeedMessageResponse)
	err := c.cc.Invoke(ctx, "/synoptic.feed.feed.IngressService/SubmitFeedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingressServiceClient) SubmitFeedMessages(ctx context.Context, opts ...grpc.CallOption) (IngressService_SubmitFeedMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IngressService_ServiceDesc.Streams[0], "/synoptic.feed.feed.IngressService/SubmitFeedMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingressServiceSubmitFeedMessagesClient{stream}
	return x, nil
}

type IngressService_SubmitFeedMessagesClient interface {
	Send(*FeedMessage) error
	Recv() (*SubmitFeedMessageResponse, error)
	grpc.ClientStream
}

type ingressServiceSubmitFeedMessagesClient struct {
	grpc.ClientStream
}

func (x *ingressServiceSubmitFeedMessagesClient) Send(m *FeedMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingressServiceSubmitFeedMessagesClient) Recv() (*SubmitFeedMessageResponse, error) {
	m := new(SubmitFeedMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngressServiceServer is the server API for IngressService service.
// All implementations must embed UnimplementedIngressServiceServer
// for forward compatibility
type IngressServiceServer interface {
	// Submits a single message to the ingress instance.
	SubmitFeedMessage(context.Context, *FeedMessage) (*SubmitFeedMessageResponse, error)
	// Submits a stream of messages to the feed ingress.
	SubmitFeedMessages(IngressService_SubmitFeedMessagesServer) error
	mustEmbedUnimplementedIngressServiceServer()
}

// UnimplementedIngressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngressServiceServer struct {
}

func (UnimplementedIngressServiceServer) SubmitFeedMessage(context.Context, *FeedMessage) (*SubmitFeedMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedMessage not implemented")
}
func (UnimplementedIngressServiceServer) SubmitFeedMessages(IngressService_SubmitFeedMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitFeedMessages not implemented")
}
func (UnimplementedIngressServiceServer) mustEmbedUnimplementedIngressServiceServer() {}

// UnsafeIngressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngressServiceServer will
// result in compilation errors.
type UnsafeIngressServiceServer interface {
	mustEmbedUnimplementedIngressServiceServer()
}

func RegisterIngressServiceServer(s grpc.ServiceRegistrar, srv IngressServiceServer) {
	s.RegisterService(&IngressService_ServiceDesc, srv)
}

func _IngressService_SubmitFeedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngressServiceServer).SubmitFeedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synoptic.feed.feed.IngressService/SubmitFeedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngressServiceServer).SubmitFeedMessage(ctx, req.(*FeedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngressService_SubmitFeedMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngressServiceServer).SubmitFeedMessages(&ingressServiceSubmitFeedMessagesServer{stream})
}

type IngressService_SubmitFeedMessagesServer interface {
	Send(*SubmitFeedMessageResponse) error
	Recv() (*FeedMessage, error)
	grpc.ServerStream
}

type ingressServiceSubmitFeedMessagesServer struct {
	grpc.ServerStream
}

func (x *ingressServiceSubmitFeedMessagesServer) Send(m *SubmitFeedMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingressServiceSubmitFeedMessagesServer) Recv() (*FeedMessage, error) {
	m := new(FeedMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngressService_ServiceDesc is the grpc.ServiceDesc for IngressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synoptic.feed.feed.IngressService",
	HandlerType: (*IngressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFeedMessage",
			Handler:    _IngressService_SubmitFeedMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitFeedMessages",
			Handler:       _IngressService_SubmitFeedMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "feed.proto",
}
